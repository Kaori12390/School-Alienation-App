import streamlit as st
import pandas as pd
import joblib

# ===== Load model and scaler =====
model = joblib.load("logistic_model_tuned.pkl")
scaler = joblib.load("scaler.pkl")
input_features = joblib.load("input_features.pkl")

# ===== Page config =====
st.set_page_config(page_title="D·ª± ƒëo√°n xa l√°nh h·ªçc ƒë∆∞·ªùng", layout="wide")

# ===== Header and Introduction =====
st.markdown("""
    <div style="background-color:#125f50;padding:2rem;border-radius:10px">
        <h1 style="color:white;font-size:2.8rem">üìö Kh·∫£o S√°t V·ªÅ Tr·∫£i Nghi·ªám H·ªçc ƒê∆∞·ªùng</h1>
        <p style="color:white;font-size:1.2rem">Ch√†o em,</p>
        <p style="color:white;font-size:1.2rem">Anh ch·ªã ƒëang th·ª±c hi·ªán m·ªôt nghi√™n c·ª©u v·ªÅ tr·∫£i nghi·ªám h·ªçc ƒë∆∞·ªùng c·ªßa h·ªçc sinh THPT. Mong em d√†nh ch√∫t th·ªùi gian tr·∫£ l·ªùi b·∫£ng kh·∫£o s√°t d∆∞·ªõi ƒë√¢y. Nh·ªØng c√¢u tr·∫£ l·ªùi c·ªßa em r·∫•t quan tr·ªçng v√† s·∫Ω gi√∫p anh ch·ªã hi·ªÉu h∆°n v·ªÅ nh·ªØng kh√≥ khƒÉn trong m√¥i tr∆∞·ªùng h·ªçc ƒë∆∞·ªùng m√† em ƒëang g·∫∑p ph·∫£i.</p>
        <p style="color:white;font-size:1.2rem">Em c·ª© tho·∫£i m√°i chia s·∫ª m·ªçi suy nghƒ© th·∫≠t l√≤ng nh√©!</p>
        <p style="color:white;font-size:1.2rem">C·∫£m ∆°n em r·∫•t nhi·ªÅu. Ch√∫c em m·ªôt ng√†y vui v·∫ª!</p>
    </div>
""", unsafe_allow_html=True)

# ===== Demographic Info Section =====
st.markdown("""
    <h2 style='font-size:1.5rem'>üéì Th√¥ng tin kh√°i qu√°t:</h2>
""", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    name = st.text_input("1. H·ªç v√† t√™n")
    gender = st.radio("2. Gi·ªõi t√≠nh", ["Nam", "N·ªØ", "Kh√°c"])
    grade = st.selectbox("3. B·∫°n ƒëang h·ªçc l·ªõp m·∫•y?", ["L·ªõp 10", "L·ªõp 11", "L·ªõp 12"])
with col2:
    birth_year = st.text_input("4. NƒÉm sinh c·ªßa b·∫°n")
    school = st.text_input("5. Tr∆∞·ªùng b·∫°n ƒëang h·ªçc")
    gpa = st.selectbox("6. ƒêi·ªÉm trung b√¨nh h·ªçc k·ª≥ tr∆∞·ªõc", ["D∆∞·ªõi 3.5", "3.5 - 5.0", "5.0 - 6.5", "6.5 - 8.0", "> 8.0"])

# ===== Survey Questions by Topic with numbering and model prediction =====
st.markdown("""
    <h2 style='font-size:1.5rem;margin-top:2rem'>üìò Kh·∫£o s√°t c·∫£m nh·∫≠n</h2>
    <p>Vui l√≤ng tr·∫£ l·ªùi theo thang ƒëi·ªÉm t·ª´ 1 (R·∫•t kh√¥ng ƒë·ªìng √Ω) ƒë·∫øn 5 (R·∫•t ƒë·ªìng √Ω).</p>
""", unsafe_allow_html=True)

question_blocks = {
    "14. B·ªë m·∫π (t√≠ch c·ª±c)": [
        ("q141", "14.1. M√¨nh c·∫£m th·∫•y n·∫øu m√¨nh h·ªçc chƒÉm ch·ªâ th√¨ ba m·∫π s·∫Ω qu√Ω tr·ªçng m√¨nh h∆°n"),
        ("q142", "14.2. M√¨nh c·∫£m th·∫•y n·∫øu m√¨nh l√†m b√†i ki·ªÉm tra t·ªët th√¨ ba m·∫π s·∫Ω ch·∫•p nh·∫≠n m√¨nh h∆°n"),
        ("q143", "14.3. M√¨nh c·∫£m th·∫•y n·∫øu m√¨nh h·ªçc gi·ªèi th√¨ ba m·∫π s·∫Ω quan t√¢m ƒë·∫øn m√¨nh h∆°n"),
        ("q144", "14.4. M√¨nh c·∫£m th·∫•y n·∫øu m√¨nh h·ªçc t·ªët th√¨ ba m·∫π s·∫Ω y√™u th∆∞∆°ng m√¨nh h∆°n"),
        ("q145", "14.5. M√¨nh c·∫£m th·∫•y n·∫øu m√¨nh ƒë·∫°t k·∫øt qu·∫£ h·ªçc t·∫≠p t·ªët th√¨ ba m·∫π s·∫Ω d·ªãu d√†ng v√† ·∫•m √°p v·ªõi m√¨nh h∆°n")
    ],
    "15. B·ªë m·∫π (ti√™u c·ª±c)": [
        ("q151", "15.1. N·∫øu m√¨nh kh√¥ng h·ªçc chƒÉm ch·ªâ th√¨ ba m·∫π s·∫Ω qu√Ω tr·ªçng m√¨nh √≠t h∆°n"),
        ("q152", "15.2. N·∫øu m√¨nh l√†m b√†i ki·ªÉm tra kh√¥ng t·ªët th√¨ ba m·∫π s·∫Ω √≠t ch·∫•p nh·∫≠n m√¨nh"),
        ("q153", "15.3. N·∫øu m√¨nh h·ªçc kh√¥ng t·ªët th√¨ ba m·∫π s·∫Ω √≠t quan t√¢m ƒë·∫øn m√¨nh"),
        ("q154", "15.4. N·∫øu m√¨nh kh√¥ng h·ªçc t·ªët th√¨ ba m·∫π s·∫Ω √≠t y√™u th∆∞∆°ng m√¨nh"),
        ("q155", "15.5. N·∫øu m√¨nh h·ªçc kh√¥ng t·ªët th√¨ ba m·∫π s·∫Ω b·ªõt d·ªãu d√†ng v√† ·∫•m √°p v·ªõi m√¨nh")
    ],
    "16. Th·∫ßy c√¥ (t√≠ch c·ª±c)": [
        ("q161", "16.1. N·∫øu m√¨nh h·ªçc chƒÉm ch·ªâ th√¨ th·∫ßy c√¥ s·∫Ω qu√Ω tr·ªçng m√¨nh h∆°n"),
        ("q162", "16.2. N·∫øu m√¨nh l√†m b√†i ki·ªÉm tra t·ªët th√¨ th·∫ßy c√¥ s·∫Ω ch·∫•p nh·∫≠n m√¨nh h∆°n"),
        ("q163", "16.3. N·∫øu m√¨nh h·ªçc gi·ªèi th√¨ th·∫ßy c√¥ s·∫Ω quan t√¢m ƒë·∫øn m√¨nh h∆°n"),
        ("q164", "16.4. N·∫øu m√¨nh h·ªçc t·ªët th√¨ th·∫ßy c√¥ s·∫Ω th√≠ch m√¨nh h∆°n"),
        ("q165", "16.5. N·∫øu m√¨nh h·ªçc gi·ªèi th√¨ th·∫ßy c√¥ s·∫Ω th√¢n thi·ªán v·ªõi m√¨nh h∆°n")
    ],
    "17. Th·∫ßy c√¥ (ti√™u c·ª±c)": [
        ("q171", "17.1. N·∫øu m√¨nh kh√¥ng h·ªçc chƒÉm ch·ªâ th√¨ th·∫ßy c√¥ s·∫Ω √≠t qu√Ω tr·ªçng m√¨nh"),
        ("q172", "17.2. N·∫øu m√¨nh l√†m b√†i ki·ªÉm tra kh√¥ng t·ªët th√¨ th·∫ßy c√¥ s·∫Ω √≠t ch·∫•p nh·∫≠n m√¨nh"),
        ("q173", "17.3. N·∫øu m√¨nh h·ªçc kh√¥ng t·ªët th√¨ th·∫ßy c√¥ s·∫Ω √≠t quan t√¢m ƒë·∫øn m√¨nh"),
        ("q174", "17.4. N·∫øu m√¨nh h·ªçc kh√¥ng t·ªët th√¨ th·∫ßy c√¥ s·∫Ω √≠t th√≠ch m√¨nh"),
        ("q175", "17.5. N·∫øu m√¨nh h·ªçc kh√¥ng t·ªët th√¨ th·∫ßy c√¥ s·∫Ω b·ªõt th√¢n thi·ªán v·ªõi m√¨nh")
    ]
}

user_input = {}
for section, questions in question_blocks.items():
    st.subheader(section)
    for key, text in questions:
        with st.container():
            st.markdown(f"<div style='background-color:#f2f2f2;padding:1rem;border-radius:8px;margin-bottom:1rem'><strong>{text}</strong></div>", unsafe_allow_html=True)
            user_input[key] = st.radio("", [1, 2, 3, 4, 5], index=2, horizontal=True, key=key)

# Mapping keys for model (ensure you map exactly to input_features expected by the model)
model_input_keys = input_features

# Dummy mapping: you will need to replace below with correct mapping to match model features
model_input = {k: user_input.get(k, 3) for k in model_input_keys}

# ===== Predict Button =====
if st.button("üîç D·ª± ƒëo√°n"):
    df_input = pd.DataFrame([model_input])

    # ƒê·∫£o chi·ªÅu n·∫øu c·∫ßn
    reverse_cols = []  # Add if necessary
    for col in reverse_cols:
        if col in df_input.columns:
            df_input[col] = df_input[col].apply(lambda x: 6 - x)

    df_scaled = scaler.transform(df_input[model_input_keys])
    result = model.predict(df_scaled)[0]

    ket_qua = {
        1: "üü¢ M·ª©c ƒë·ªô TH·∫§P",
        2: "üü° M·ª©c ƒë·ªô V·ª™A",
        3: "üî¥ M·ª©c ƒë·ªô CAO"
    }
    st.success(f"‚úÖ K·∫øt qu·∫£ d·ª± ƒëo√°n: **{ket_qua[result]}**")
