import streamlit as st
import pandas as pd
import joblib

# ======================== Load model & preprocessing ========================
model = joblib.load("logistic_model_tuned.pkl")
scaler = joblib.load("scaler.pkl")
input_features = joblib.load("input_features.pkl")

# ======================== Page configuration ========================
st.set_page_config(page_title="D·ª± ƒëo√°n xa l√°nh h·ªçc ƒë∆∞·ªùng", layout="wide")

# ======================== Custom CSS ========================
st.markdown("""
<style>
    body {
        font-family: 'Arial', sans-serif;
    }
    .question-box {
        background-color: #f2f2f2;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 10px;
    }
    .intro-box {
        background-color: #146356;
        padding: 25px;
        border-radius: 10px;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

# ======================== Introduction ========================
st.markdown("""
<div class="intro-box">
    <h2>üìñ Kh·∫£o S√°t V·ªÅ Tr·∫£i Nghi·ªám H·ªçc ƒê∆∞·ªùng</h2>
    <p>Ch√†o em,
    <br>Ch·ªã/m·ªôt anh ƒëang th·ª±c hi·ªán m·ªôt nghi√™n c·ª©u v·ªÅ tr·∫£i nghi·ªám h·ªçc ƒë∆∞·ªùng c·ªßa h·ªçc sinh THPT.
    Mong em d√†nh ch√∫t th·ªùi gian tr·∫£ l·ªùi b·∫£ng kh·∫£o s√°t d∆∞·ªõi ƒë√¢y. Nh·ªØng c√¢u tr·∫£ l·ªùi c·ªßa em r·∫•t quan tr·ªçng v√† s·∫Ω gi√∫c ch·ªã/anh hi·ªÉu h∆°n v·ªÅ nh·ªØng kh√≥ khƒÉn m√† h·ªçc sinh ƒëang g·∫∑p ph·∫£i.
    <br>Kh√¥ng c√≥ ƒë√°p √°n ƒë√∫ng hay sai. Em h√£y tr·∫£ l·ªùi th·∫≠t th·ªÉ nh√©!
    <br>Ch√¢n th√†nh c·∫£m ∆°n em r·∫•t nhi·ªÅu üôèüèª</p>
</div>
""", unsafe_allow_html=True)

# ======================== Survey Form ========================
st.markdown("""
### üéì Th√¥ng tin kh√°i qu√°t:
""")

col1, col2 = st.columns(2)
with col1:
    ho_ten = st.text_input("H·ªç v√† t√™n")
    gioi_tinh = st.radio("Gi·ªõi t√≠nh", ["Nam", "N·ªØ", "Kh√°c"])
with col2:
    lop = st.text_input("L·ªõp")
    truong = st.text_input("Tr∆∞·ªùng")

if ho_ten and lop and truong:
    if st.button("B·∫Øt ƒë·∫ßu kh·∫£o s√°t"):
        st.session_state.start_survey = True

# ======================== Questions ========================
if st.session_state.get("start_survey"):
    st.markdown("""
    <h3>üéÆ Kh·∫£o s√°t tr·∫£i nghi·ªám h·ªçc ƒë∆∞·ªùng</h3>
    <p>Vui l√≤ng tr·∫£ l·ªùi c√°c c√¢u h·ªèi theo thang ƒëi·ªÉm 1 (<strong>r·∫•t kh√¥ng ƒë·ªìng √Ω</strong>) ƒë·∫øn 5 (<strong>r·∫•t ƒë·ªìng √Ω</strong>).</p>
    """, unsafe_allow_html=True)

    # Define all questions based on the survey document
    question_texts = {
        "al_learn_expect": "1. B·∫°n mong ƒë·ª£i ƒë∆∞·ª£c h·ªçc ·ªü tr∆∞·ªùng",
        "al_learn_like": "2. B·∫°n th√≠ch n·ªôi dung h·ªçc ·ªü tr∆∞·ªùng",
        "al_learn_exciting": "3. Vi·ªác h·ªçc ·ªü tr∆∞·ªùng r·∫•t th√∫ v·ªã",
        "al_learn_pleasure": "4. B·∫°n c·∫£m th·∫•y vui khi h·ªçc ·ªü tr∆∞·ªùng",
        "al_learn_useless": "5. B·∫°n c·∫£m th·∫•y nh·ªØng ƒëi·ªÅu h·ªçc ·ªü tr∆∞·ªùng l√† v√¥ √≠ch",
        "al_learn_boring": "6. B·∫°n th·∫•y vi·ªác h·ªçc ·ªü tr∆∞·ªùng th·∫≠t nh√†m ch√°n",
        "al_learn_waste": "7. Vi·ªác ƒëi h·ªçc l√† l√£ng ph√≠ th·ªùi gian",
        "al_learn_useful": "8. Nh·ªØng ƒëi·ªÅu h·ªçc ·ªü tr∆∞·ªùng h·ªØu √≠ch cho cu·ªôc s·ªëng",
        # ... Th√™m ti·∫øp c√°c c√¢u h·ªèi ti·∫øp theo ...
    }

    user_input = {}
    q_keys = list(question_texts.keys())
    for i in range(0, len(q_keys), 2):
        col1, col2 = st.columns(2)
        with col1:
            key1 = q_keys[i]
            user_input[key1] = st.radio(
                question_texts[key1], [1, 2, 3, 4, 5], key=key1, horizontal=True
            )
        if i + 1 < len(q_keys):
            with col2:
                key2 = q_keys[i + 1]
                user_input[key2] = st.radio(
                    question_texts[key2], [1, 2, 3, 4, 5], key=key2, horizontal=True
                )

    if st.button("üî¢ D·ª± ƒëo√°n"):
        df_input = pd.DataFrame([user_input])

        # ƒê·∫£o chi·ªÅu
        reverse_cols = ['al_learn_boring', 'al_learn_useless', 'al_learn_waste']
        for col in reverse_cols:
            if col in df_input.columns:
                df_input[col] = df_input[col].apply(lambda x: 6 - x)

        # Chu·∫©n h√≥a
        df_scaled = scaler.transform(df_input[input_features])
        result = model.predict(df_scaled)[0]

        # K·∫øt qu·∫£
        ket_qua = {
            1: "üî¥ M·ª©c ƒê·ªò TH·∫§P",
            2: "üü° M·ª©c ƒê·ªò V·ª´a",
            3: "üîµ M·ª©c ƒê·ªò CAO"
        }
        st.success(f"K·∫øt qu·∫£ d·ª± ƒëo√°n: **{ket_qua[result]}**")


