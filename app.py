import streamlit as st
import pandas as pd
import joblib

# ===== Load d·ªØ li·ªáu v√† m√¥ h√¨nh =====
model = joblib.load("logistic_model_tuned.pkl")
scaler = joblib.load("scaler.pkl")
input_features = joblib.load("input_features.pkl")

# ===== Danh s√°ch c√°c c√¢u h·ªèi kh·∫£o s√°t theo th·ª© t·ª± g·ªëc =====
questions = [
    "1. NƒÉm sinh c·ªßa b·∫°n?",
    "2. B·∫°n ƒëang h·ªçc l·ªõp m·∫•y?",
    "3. Gi·ªõi t√≠nh c·ªßa b·∫°n l√† g√¨?",
    "4. Tr∆∞·ªùng b·∫°n ƒëang h·ªçc t√™n g√¨?",
    "5. ƒêi·ªÉm trung b√¨nh h·ªçc k·ª≥ tr∆∞·ªõc c·ªßa b·∫°n l√†?",
    "6. X·∫øp lo·∫°i h·ªçc l·ª±c h·ªçc k·ª≥ tr∆∞·ªõc c·ªßa b·∫°n l√† g√¨?",
    "7. M√¥ t·∫£ ƒë√∫ng nh·∫•t v·ªÅ gia ƒë√¨nh b·∫°n ƒëang s·ªëng c√πng?",
    "8. Tr√¨nh ƒë·ªô h·ªçc v·∫•n c·ªßa m·∫π (ho·∫∑c m·∫π k·∫ø)?",
    "9. Ngh·ªÅ nghi·ªáp c·ªßa m·∫π (ho·∫∑c m·∫π k·∫ø)?",
    "10. Thu nh·∫≠p trung b√¨nh h·∫±ng th√°ng c·ªßa m·∫π (ho·∫∑c m·∫π k·∫ø)?",
    "11. Tr√¨nh ƒë·ªô h·ªçc v·∫•n c·ªßa b·ªë (ho·∫∑c b·ªë d∆∞·ª£ng)?",
    "12. Ngh·ªÅ nghi·ªáp c·ªßa b·ªë (ho·∫∑c b·ªë d∆∞·ª£ng)?",
    "13. Thu nh·∫≠p trung b√¨nh h·∫±ng th√°ng c·ªßa b·ªë (ho·∫∑c b·ªë d∆∞·ª£ng)?",
]

# ===== C√¢u h·ªèi thang Likert 1-5 c·∫ßn d√πng m√¥ h√¨nh d·ª± ƒëo√°n =====
likert_questions = {
    "al_learn_enjoy": "19.1. M√¨nh mong ƒë·ª£i ƒë∆∞·ª£c h·ªçc ·ªü tr∆∞·ªùng",
    "al_learn_like": "19.2. M√¨nh th√≠ch nh·ªØng g√¨ ƒë∆∞·ª£c h·ªçc ·ªü tr∆∞·ªùng",
    "al_learn_boring": "19.3. Nh·ªØng g√¨ h·ªçc ·ªü tr∆∞·ªùng r·∫•t nh√†m ch√°n",
    "al_learn_excite": "19.4. Vi·ªác h·ªçc ·ªü tr∆∞·ªùng r·∫•t th√∫ v·ªã",
    "al_learn_interest": "19.5. M√¨nh kh√¥ng th·∫•y h·ª©ng th√∫ v·ªõi vi·ªác h·ªçc ·ªü tr∆∞·ªùng",
    "al_learn_useful": "19.6. Nh·ªØng ƒëi·ªÅu h·ªçc ·ªü tr∆∞·ªùng kh√¥ng h·ªØu √≠ch trong cu·ªôc s·ªëng",
    "al_learn_useless": "19.7. M√¨nh th·∫•y nh·ªØng th·ª© ph·∫£i h·ªçc ·ªü tr∆∞·ªùng th·∫≠t v√¥ d·ª•ng",
    "al_learn_waste": "19.8. H·ªçc ·ªü tr∆∞·ªùng l√† l√£ng ph√≠ th·ªùi gian",
    "al_teacher_angry": "20.1. Th·∫ßy c√¥ l√†m m√¨nh b·ª±c b·ªôi",
    "al_teacher_accept": "20.2. M√¨nh c·∫£m th·∫•y ƒë∆∞·ª£c th·∫ßy c√¥ ch·∫•p nh·∫≠n",
    "al_teacher_uncomfort": "20.3. M√¨nh kh√¥ng th·∫•y tho·∫£i m√°i khi th·∫ßy c√¥ ·ªü g·∫ßn",
    "al_teacher_disrespect": "20.4. M√¨nh kh√¥ng c·∫£m th·∫•y ƒë∆∞·ª£c th·∫ßy c√¥ coi tr·ªçng",
    "al_teacher_understand": "20.5. M√¨nh nghƒ© th·∫ßy c√¥ kh√¥ng hi·ªÉu m√¨nh",
    "al_teacher_care": "20.6. M√¨nh nghƒ© th·∫ßy c√¥ kh√¥ng quan t√¢m ƒë·∫øn m√¨nh",
    "al_teacher_emotion": "20.7. M√¨nh nghƒ© th·∫ßy c√¥ kh√¥ng quan t√¢m ƒë·∫øn c·∫£m x√∫c c·ªßa m√¨nh",
    "al_teacher_trust": "20.8. M√¨nh c√≥ th·ªÉ tin t∆∞·ªüng th·∫ßy c√¥",
    "al_peer_angry": "21.1. B·∫°n b√® l√†m m√¨nh b·ª±c b·ªôi",
    "al_peer_accept": "21.2. M√¨nh c·∫£m th·∫•y ƒë∆∞·ª£c b·∫°n b√® ch·∫•p nh·∫≠n",
    "al_peer_fit": "21.3. M√¨nh c·∫£m th·∫•y m√¨nh kh√¥ng ph√π h·ª£p v·ªõi l·ªõp",
    "al_peer_part": "21.4. M√¨nh vui khi ƒë∆∞·ª£c l√† m·ªôt ph·∫ßn c·ªßa l·ªõp",
    "al_peer_fun": "21.5. M√¨nh th·∫•y tr∆∞·ªùng h·ªçc l√† n∆°i tuy·ªát v·ªùi v√¨ c√≥ nhi·ªÅu b·∫°n b√®",
    "al_peer_ignore": "21.6. M√¨nh kh√¥ng quan t√¢m ƒë·∫øn b·∫°n h·ªçc",
    "al_peer_trust": "21.7. M√¨nh nghƒ© m√¨nh c√≥ th·ªÉ tin t∆∞·ªüng b·∫°n h·ªçc",
    "al_peer_like": "21.8. L·ªõp h·ªçc c·ªßa m√¨nh r·∫•t tuy·ªát",
}

reverse_cols = [
    "al_learn_boring", "al_learn_useless", "al_learn_waste",
    "al_teacher_angry", "al_teacher_uncomfort", "al_teacher_disrespect",
    "al_teacher_understand", "al_teacher_care", "al_teacher_emotion",
    "al_peer_angry", "al_peer_ignore", "al_peer_fit",
]

# ===== Giao di·ªán Streamlit =====
st.set_page_config(page_title="D·ª± ƒëo√°n xa l√°nh h·ªçc ƒë∆∞·ªùng", layout="wide")

st.markdown("""
    <style>
    .question-block {
        background-color: #f2f2f2;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    </style>
""", unsafe_allow_html=True)

st.title("üìö D·ª± ƒëo√°n M·ª©c ƒë·ªô Xa l√°nh H·ªçc ƒë∆∞·ªùng")

# ===== Gi·ªõi thi·ªáu =====
st.markdown("""
    <div style="background-color:#17665D;padding:2rem;border-radius:10px">
        <h1 style="color:white">üìò Kh·∫£o S√°t V·ªÅ Tr·∫£i Nghi·ªám H·ªçc ƒê∆∞·ªùng</h1>
        <p style="color:white;font-size:1.1rem">Ch√†o em,<br>
        Anh/ch·ªã ƒëang th·ª±c hi·ªán m·ªôt kh·∫£o s√°t ƒë·ªÉ t√¨m hi·ªÉu tr·∫£i nghi·ªám h·ªçc ƒë∆∞·ªùng c·ªßa h·ªçc sinh THPT. Nh·ªØng chia s·∫ª ch√¢n th·∫≠t c·ªßa em s·∫Ω gi√∫p b·ªçn anh/ch·ªã hi·ªÉu h∆°n v·ªÅ c·∫£m nh·∫≠n v√† suy nghƒ© c·ªßa h·ªçc sinh nh∆∞ em trong qu√° tr√¨nh h·ªçc t·∫≠p t·∫°i tr∆∞·ªùng.<br>
        Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi ƒë√∫ng hay sai ƒë√¢u, n√™n em h√£y tr·∫£ l·ªùi theo ƒë√∫ng c·∫£m nh·∫≠n c·ªßa m√¨nh nh√©. C·∫£m ∆°n em r·∫•t nhi·ªÅu!</p>
    </div>
""", unsafe_allow_html=True)

# ===== Th√¥ng tin n·ªÅn t·∫£ng =====
with st.form("info_form"):
    st.subheader("üìù Th√¥ng tin c√° nh√¢n")
    col1, col2 = st.columns(2)
    with col1:
        st.text_input("1. NƒÉm sinh c·ªßa b·∫°n?")
        st.selectbox("2. B·∫°n ƒëang h·ªçc l·ªõp m·∫•y?", ["L·ªõp 10", "L·ªõp 11", "L·ªõp 12"])
        st.selectbox("3. Gi·ªõi t√≠nh c·ªßa b·∫°n l√† g√¨?", ["Nam", "N·ªØ", "Kh√¥ng mu·ªën ti·∫øt l·ªô"])
        st.text_input("4. Tr∆∞·ªùng b·∫°n ƒëang h·ªçc t√™n g√¨?")
        st.selectbox("5. ƒêi·ªÉm trung b√¨nh h·ªçc k·ª≥ tr∆∞·ªõc", ["D∆∞·ªõi 3.5", "3.5 - 5.0", "5.0 - 6.5", "6.5 - 8.0", "> 8.0"])
        st.selectbox("6. X·∫øp lo·∫°i h·ªçc l·ª±c h·ªçc k·ª≥ tr∆∞·ªõc", ["Y·∫øu", "K√©m", "Trung b√¨nh", "Kh√°", "Gi·ªèi"])
    with col2:
        st.selectbox("7. M√¥ t·∫£ gia ƒë√¨nh b·∫°n ƒëang s·ªëng c√πng", ["C·∫£ b·ªë v√† m·∫π", "B·ªë kh√¥ng s·ªëng c√πng", "M·∫π kh√¥ng s·ªëng c√πng", "Kh√¥ng s·ªëng c√πng b·ªë m·∫π"])
        st.selectbox("8. Tr√¨nh ƒë·ªô h·ªçc v·∫•n c·ªßa m·∫π", ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc", "Sau ƒë·∫°i h·ªçc"])
        st.selectbox("9. Ngh·ªÅ nghi·ªáp c·ªßa m·∫π", ["Qu·∫£n l√Ω", "Chuy√™n gia", "C√¥ng nh√¢n", "Gi√°o vi√™n", "Lao ƒë·ªông kh√°c"])
        st.selectbox("10. Thu nh·∫≠p m·∫π", ["< 5tr", "5-10tr", "10-15tr", "15-20tr", "> 20tr"])
        st.selectbox("11. Tr√¨nh ƒë·ªô h·ªçc v·∫•n c·ªßa b·ªë", ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc", "Sau ƒë·∫°i h·ªçc"])
        st.selectbox("12. Ngh·ªÅ nghi·ªáp c·ªßa b·ªë", ["Qu·∫£n l√Ω", "Chuy√™n gia", "C√¥ng nh√¢n", "Gi√°o vi√™n", "Lao ƒë·ªông kh√°c"])
        st.selectbox("13. Thu nh·∫≠p b·ªë", ["< 5tr", "5-10tr", "10-15tr", "15-20tr", "> 20tr"])
    st.form_submit_button("L∆∞u th√¥ng tin")

# ===== Thang ƒëo d·ª± ƒëo√°n (Likert) =====
st.subheader("üìä Tr·∫£ l·ªùi c√°c c√¢u h·ªèi kh·∫£o s√°t")
st.markdown("Vui l√≤ng tr·∫£ l·ªùi c√°c c√¢u h·ªèi theo thang ƒëi·ªÉm 1 (_r·∫•t kh√¥ng ƒë·ªìng √Ω_) ƒë·∫øn 5 (_r·∫•t ƒë·ªìng √Ω_).")
user_input = {}
cols = st.columns(2)
for i, (var, question) in enumerate(likert_questions.items(), start=14):
    col = cols[i % 2]
    with col:
        with st.container():
            st.markdown(f"<div class='question-block'><strong>{question}</strong>", unsafe_allow_html=True)
            user_input[var] = st.radio("", [1, 2, 3, 4, 5], key=var, horizontal=True)
            st.markdown("</div>", unsafe_allow_html=True)

# ===== D·ª± ƒëo√°n m√¥ h√¨nh =====
if st.button("D·ª± ƒëo√°n"):
    df_input = pd.DataFrame([user_input])
    for col in reverse_cols:
        if col in df_input:
            df_input[col] = df_input[col].apply(lambda x: 6 - x)

    df_scaled = scaler.transform(df_input[input_features])
    result = model.predict(df_scaled)[0]
    ket_qua = {
        1: "üü¢ M·ª©c ƒë·ªô TH·∫§P",
        2: "üü° M·ª©c ƒë·ªô V·ª™A",
        3: "üî¥ M·ª©c ƒë·ªô CAO",
    }
    st.success(f"‚úÖ K·∫øt qu·∫£ d·ª± ƒëo√°n: **{ket_qua[result]}**")

