import streamlit as st
import pandas as pd
import joblib

# Load m√¥ h√¨nh v√† scaler
model = joblib.load("logistic_model_tuned.pkl")
scaler = joblib.load("scaler.pkl")
input_features = joblib.load("input_features.pkl")

# C√¢u h·ªèi n·ªÅn t·∫£ng (1-13)
def thong_tin_nen_tang():
    st.header("1. Th√¥ng tin chung")
    birth = st.text_input("1. NƒÉm sinh c·ªßa b·∫°n")
    grade = st.selectbox("2. B·∫°n ƒëang h·ªçc l·ªõp m·∫•y", ["L·ªõp 10", "L·ªõp 11", "L·ªõp 12"])
    gender = st.radio("3. Gi·ªõi t√≠nh", ["Nam", "N·ªØ", "Kh√¥ng mu·ªën ti·∫øt l·ªô"])
    school = st.text_input("4. Tr∆∞·ªùng b·∫°n ƒëang h·ªçc")
    gpa = st.selectbox("5. ƒêi·ªÉm trung b√¨nh h·ªçc k√¨ tr∆∞·ªõc", ["D∆∞·ªõi 3.5", "3.5 - 5.0", "5.0 - 6.5", "6.5 - 8.0", "Tr√™n 8.0"])
    gpa_des = st.selectbox("6. X·∫øp lo·∫°i h·ªçc l·ª±c", ["Y·∫øu", "K√©m", "Trung b√¨nh", "Kh√°", "Gi·ªèi"])
    livewith = st.selectbox("7. M√¥ t·∫£ v·ªÅ gia ƒë√¨nh b·∫°n s·ªëng c√πng", ["S·ªëng v·ªõi b·ªë v√† m·∫π", "Ch·ªâ c√≥ m·∫π", "Ch·ªâ c√≥ b·ªë", "Kh√¥ng s·ªëng c√πng b·ªë m·∫π"])
    mom_edu = st.selectbox("8. Tr√¨nh ƒë·ªô h·ªçc v·∫•n c·ªßa m·∫π", ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc", "Sau ƒë·∫°i h·ªçc"])
    mom_occ = st.text_input("9. Ngh·ªÅ nghi·ªáp c·ªßa m·∫π")
    mom_inc = st.selectbox("10. Thu nh·∫≠p trung b√¨nh/th√°ng c·ªßa m·∫π", ["< 5tr", "5-10tr", "10-15tr", "15-20tr", ">20tr"])
    dad_edu = st.selectbox("11. Tr√¨nh ƒë·ªô h·ªçc v·∫•n c·ªßa b·ªë", ["Ti·ªÉu h·ªçc", "THCS", "THPT", "ƒê·∫°i h·ªçc", "Sau ƒë·∫°i h·ªçc"])
    dad_occ = st.text_input("12. Ngh·ªÅ nghi·ªáp c·ªßa b·ªë")
    dad_inc = st.selectbox("13. Thu nh·∫≠p trung b√¨nh/th√°ng c·ªßa b·ªë", ["< 5tr", "5-10tr", "10-15tr", "15-20tr", ">20tr"])

# Bi·∫øn ƒë·∫£o chi·ªÅu
reverse_cols = [
    'al_learn_boring', 'al_learn_useless', 'al_learn_waste',
    'al_teach_nervous', 'al_teach_comfort', 'al_teach_respect',
    'al_teach_under', 'al_teach_care', 'al_teach_feeling', 'al_teach_trust',
    'al_class_nervous', 'al_class_fit', 'al_class_part',
    'al_class_nice', 'al_class_care', 'al_class_trust'
]

# Nh√≥m c√¢u h·ªèi v√† nh√£n
groups = {
    "üìñ Vi·ªác h·ªçc": ['al_learn_like', 'al_learn_enjoy', 'al_learn_boring', 'al_learn_exciting', 'al_learn_useless', 'al_learn_waste'],
    "üë©‚Äçüè´ Gi√°o vi√™n": ['al_teach_nervous', 'al_teach_accept', 'al_teach_comfort', 'al_teach_respect', 'al_teach_under', 'al_teach_care', 'al_teach_feeling', 'al_teach_trust'],
    "ü§ù B·∫°n b√®": ['al_class_nervous', 'al_class_accept', 'al_class_fit', 'al_class_part', 'al_class_nice', 'al_class_care', 'al_class_trust', 'al_class_cool'],
    "üß† T·ª± ƒë√°nh gi√° b·∫£n th√¢n": ['achv_value', 'achv_bad_feel', 'achv_worth']
}

feature_labels = {
    'al_learn_like': "19.1. M√¨nh mong ƒë·ª£i ƒë∆∞·ª£c h·ªçc ·ªü tr∆∞·ªùng",
    'al_learn_enjoy': "19.2. M√¨nh th√≠ch nh·ªØng g√¨ ƒë∆∞·ª£c h·ªçc ·ªü tr∆∞·ªùng",
    'al_learn_boring': "19.3. Nh·ªØng g√¨ h·ªçc ·ªü tr∆∞·ªùng r·∫•t nh√†m ch√°n",
    'al_learn_exciting': "19.4. Vi·ªác h·ªçc ·ªü tr∆∞·ªùng r·∫•t th√∫ v·ªã",
    'al_learn_useless': "19.7. M√¨nh th·∫•y nh·ªØng th·ª© ph·∫£i h·ªçc ·ªü tr∆∞·ªùng th·∫≠t v√¥ d·ª•ng",
    'al_learn_waste': "19.8. H·ªçc ·ªü tr∆∞·ªùng l√† l√£ng ph√≠ th·ªùi gian",
    'achv_value': "18.4. M√¨nh c·∫£m th·∫•y m√¨nh c√≥ gi√° tr·ªã h∆°n khi ƒë·∫°t th√†nh t√≠ch t·ªët",
    'achv_bad_feel': "18.2. M√¨nh c·∫£m th·∫•y t·ªá v·ªÅ b·∫£n th√¢n n·∫øu h·ªçc kh√¥ng t·ªët",
    'achv_worth': "18.5. M√¨nh c·∫£m th·∫•y t·ª± ti h∆°n khi k·∫øt qu·∫£ h·ªçc t·∫≠p kh√¥ng t·ªët"
}

# CSS x√°m n·ªÅn
st.markdown("""
    <style>
    .question-block {
        background-color: #f0f0f0;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 10px;
    }
    </style>
""", unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ
st.title("Kh·∫£o s√°t c·∫£m nh·∫≠n v·ªÅ vi·ªác h·ªçc, gi√°o vi√™n v√† gia ƒë√¨nh")
st.markdown("""
Ch√∫ng m√¨nh l√† nh√≥m nghi√™n c·ª©u thu·ªôc EdLab Asia ƒëang th·ª±c hi·ªán kh·∫£o s√°t nh·∫±m t√¨m hi·ªÉu c·∫£m nh·∫≠n c·ªßa h·ªçc sinh v·ªÅ s·ª± quan t√¢m h·ªçc t·∫≠p t·ª´ ph√≠a gia ƒë√¨nh v√† nh√† tr∆∞·ªùng.
""")

# Th√¥ng tin chung
thong_tin_nen_tang()

# Thu th·∫≠p d·ªØ li·ªáu cho c√°c nh√≥m c√¢u h·ªèi
user_input = {}
for group_name, features in groups.items():
    st.subheader(group_name)
    for feat in features:
        label = feature_labels.get(feat, feat)
        with st.container():
            st.markdown(f'<div class="question-block">**{label}**</div>', unsafe_allow_html=True)
            user_input[feat] = st.radio("", [1, 2, 3, 4, 5], index=2, key=feat)

# Khi nh·∫•n d·ª± ƒëo√°n
if st.button("D·ª± ƒëo√°n"): 
    df_input = pd.DataFrame([user_input])
    for col in reverse_cols:
        if col in df_input.columns:
            df_input[col] = df_input[col].apply(lambda x: 6 - x)
    df_scaled = scaler.transform(df_input[input_features])
    result = model.predict(df_scaled)[0]
    st.success(f"K·∫øt qu·∫£: {'üü¢ Th·∫•p' if result==1 else 'üü° Trung b√¨nh' if result==2 else 'üî¥ Cao'}")

